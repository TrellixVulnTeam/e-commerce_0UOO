{"version":3,"sources":["../../../lib/idx/remediate.ts"],"names":["idx","AuthSdkError","isRawIdxResponse","getRemediator","idxRemediations","values","options","flow","flowMonitor","remediator","remediatorCandidates","remediation","isRemeditionInFlow","Object","keys","includes","name","T","isRemediatorCandidate","canRemediate","push","isTerminalResponse","idxResponse","neededToProceed","interactionCode","length","canSkipFn","some","getIdxMessages","messages","rawIdxState","globalMessages","value","map","message","fieldMessages","getMessages","getNextStep","nextStep","canSkip","handleIdxError","e","idxState","makeIdxState","terminal","remediate","actions","action","canceled","reduce","acc","curr","loopDetected","getName","data","getData","proceed","trackRemediations","getValuesAfterProceed"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n/* eslint-disable max-statements, max-depth, complexity */\nimport idx from '@okta/okta-idx-js';\nimport { AuthSdkError } from '../errors';\nimport { Remediator, RemediationValues } from './remediators';\nimport { RunOptions, RemediationFlow } from './run';\nimport { NextStep, IdxMessage } from './types';\nimport { \n  IdxResponse, \n  isRawIdxResponse, \n  IdxRemediation, \n} from './types/idx-js';\n\ninterface RemediationResponse {\n  idxResponse?: IdxResponse;\n  nextStep?: NextStep;\n  messages?: IdxMessage[];\n  terminal?: boolean;\n  canceled?: boolean;\n}\n// Return first match idxRemediation in allowed remediators\nexport function getRemediator(\n  idxRemediations: IdxRemediation[],\n  values: RemediationValues,\n  options: RunOptions,\n): Remediator {\n  const { flow, flowMonitor } = options;\n\n  let remediator;\n  const remediatorCandidates = [];\n  for (let remediation of idxRemediations) {\n    const isRemeditionInFlow = Object.keys(flow).includes(remediation.name);\n    if (!isRemeditionInFlow) {\n      continue;\n    }\n      \n    const T = flow[remediation.name];\n    remediator = new T(remediation, values);\n    if (flowMonitor.isRemediatorCandidate(remediator, idxRemediations, values)) {\n      if (remediator.canRemediate()) {\n        // found the remediator\n        return remediator;\n      }\n      // remediator cannot handle the current values\n      // maybe return for next step\n      remediatorCandidates.push(remediator);  \n    }\n  }\n  \n  // TODO: why is it a problem to have multiple remediations? \n  // JIRA: https://oktainc.atlassian.net/browse/OKTA-400758\n  // if (remediatorCandidates.length > 1) {\n  //   const remediationNames = remediatorCandidates.reduce((acc, curr) => {\n  //     const name = curr.getName();\n  //     return acc ? `${acc}, ${name}` : name;\n  //   }, '');\n  //   throw new AuthSdkError(`\n  //     More than one remediation can match the current input, remediations: ${remediationNames}\n  //   `);\n  // }\n\n  return remediatorCandidates[0];\n}\n\nfunction isTerminalResponse(idxResponse: IdxResponse) {\n  const { neededToProceed, interactionCode } = idxResponse;\n  return !neededToProceed.length && !interactionCode;\n}\n\nfunction canSkipFn(idxResponse: IdxResponse) {\n  return idxResponse.neededToProceed.some(({ name }) => name === 'skip');\n}\n\nfunction getIdxMessages(\n  idxResponse: IdxResponse, flow: RemediationFlow\n): IdxMessage[] {\n  let messages = [];\n  const { rawIdxState, neededToProceed } = idxResponse;\n\n  // Handle global messages\n  const globalMessages = rawIdxState.messages?.value.map(message => message);\n  if (globalMessages) {\n    messages = [...messages, ...globalMessages];\n  }\n\n  // Handle field messages for current flow\n  for (let remediation of neededToProceed) {\n    const T = flow[remediation.name];\n    if (!T) {\n      continue;\n    }\n    const remediator = new T(remediation);\n    const fieldMessages = remediator.getMessages();\n    if (fieldMessages) {\n      messages = [...messages, ...fieldMessages];\n    }\n  }\n\n  return messages;\n}\n\nfunction getNextStep(\n  remediator: Remediator, idxResponse: IdxResponse\n): NextStep {\n  const nextStep = remediator.getNextStep();\n  const canSkip = canSkipFn(idxResponse);\n  return { ...nextStep, canSkip };\n}\n\nfunction handleIdxError(e, flow, remediator?) {\n  // Handle idx messages\n  if (isRawIdxResponse(e)) {\n    const idxState = idx.makeIdxState(e);\n    const terminal = isTerminalResponse(idxState);\n    const messages = getIdxMessages(idxState, flow);\n    if (terminal) {\n      return { terminal, messages };\n    } else {\n      const nextStep = remediator && getNextStep(remediator, idxState);\n      return { \n        messages, \n        ...(nextStep && { nextStep }) \n      };\n    }\n  }\n  // Thrown error terminates the interaction with idx\n  throw e;\n}\n\n// This function is called recursively until it reaches success or cannot be remediated\nexport async function remediate(\n  idxResponse: IdxResponse,\n  values: RemediationValues,\n  options: RunOptions\n): Promise<RemediationResponse> {\n  const { neededToProceed } = idxResponse;\n  const { actions, flow, flowMonitor } = options;\n  \n  // Try actions in idxResponse first\n  if (actions) {\n    for (let action of actions) {\n      if (typeof idxResponse.actions[action] === 'function') {\n        try {\n          idxResponse = await idxResponse.actions[action]();\n        } catch (e) {\n          return handleIdxError(e, flow);\n        }\n        if (action === 'cancel') {\n          return { canceled: true };\n        }\n        return remediate(idxResponse, values, options); // recursive call\n      }\n    }\n  }\n  \n  const remediator = getRemediator(neededToProceed, values, options);\n  \n  if (!remediator) {\n    throw new AuthSdkError(`\n      No remediation can match current flow, check policy settings in your org.\n      Remediations: [${neededToProceed.reduce((acc, curr) => acc ? acc + ' ,' + curr.name : curr.name, '')}]\n    `);\n  }\n\n  if (flowMonitor.loopDetected(remediator)) {\n    throw new AuthSdkError(`\n      Remediation run into loop, break!!! remediation: ${remediator.getName()}\n    `);\n  }\n\n  // Recursive loop breaker\n  // Return next step to the caller\n  if (!remediator.canRemediate()) {\n    const nextStep = getNextStep(remediator, idxResponse);\n    return { idxResponse, nextStep };\n  }\n\n  const name = remediator.getName();\n  const data = remediator.getData();\n  try {\n    idxResponse = await idxResponse.proceed(name, data);\n\n    // Track succeed remediations in the current transaction\n    await flowMonitor.trackRemediations(name);\n    \n    // Successfully get interaction code\n    if (idxResponse.interactionCode) {\n      return { idxResponse };\n    }\n\n    // Reach to terminal state\n    const terminal = isTerminalResponse(idxResponse);\n    const messages = getIdxMessages(idxResponse, flow);\n    if (terminal) {\n      return { terminal, messages };\n    }\n\n    // Handle idx message in nextStep\n    if (messages.length) {\n      const nextStep = getNextStep(remediator, idxResponse);\n      return { nextStep, messages };\n    }\n    \n    // We may want to trim the values bag for the next remediation\n    // Let the remediator decide what the values should be (default to current values)\n    values = remediator.getValuesAfterProceed();\n    return remediate(idxResponse, values, options); // recursive call\n  } catch (e) {\n    return handleIdxError(e, flow, remediator);\n  }\n}\n"],"file":"remediate.js"}